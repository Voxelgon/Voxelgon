Shader "Voxelgon/Editor Grid Fill"
{
    Properties
    {
        _Color ("Color", Color) = (1,1,1,1)
        _Offset ("Offset", Vector) = (0, 0, 0, 0)
        _Radius ("Circle Radius", Range(0, 5)) = 0.2 
        _FadeCutoff ("Soft Particles Cutoff", Range(0, 1)) = 0.5
        _InvFade("Soft Particles Factor", Range(0.01,3.0)) = 1.0
    }
 
    SubShader
    {
        Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" "PreviewType"="Plane" }
        LOD 200
        //ZTest LEqual
        Blend SrcAlpha One
        Cull Off Lighting Off ZWrite Off

 
        CGPROGRAM
        #pragma surface surf Unlit vertex:vert alpha:fade
        #pragma multi_compile _ SOFTPARTICLES_ON
        #pragma multi_compile_fog
 
        #pragma target 3.0
 
        #include "UnityCG.cginc"
 
        fixed4 _Color;
        half2 _Offset;
        fixed _Radius;
        float _FadeCutoff;
        float _InvFade;
        sampler2D_float _CameraDepthTexture;
 
        struct Input {
            float2 uv_MainTex;
            UNITY_FOG_COORDS(1)
            float2 texcoord : TEXCOORD0;
            #ifdef SOFTPARTICLES_ON
            float4 projPos : TEXCOORD2;
            #endif
        };
 
        half _Smoothness;
        half _Specular;


        float nrand( float2 n ) {
            return frac(sin(dot(n.xy, float2(12.9898, 78.233)))* 43758.5453);
        }

        float n2rand( float2 n ) {
            float t = frac( _Time );
            float nrnd0 = nrand( n + 0.07*t );

            // Convert uniform distribution into triangle-shaped distribution.
            float orig = nrnd0*2.0-1.0;
            nrnd0 = orig*rsqrt(abs(orig));
            nrnd0 = max(-1.0,nrnd0); // Nerf the NaN generated by 0*rsqrt(0). Thanks @FioraAeterna!
            nrnd0 = nrnd0-sign(orig)+0.5;
            
            // Result is range [-0.5,1.5] which is
            // useful for actual dithering.
            // convert to [0,1] for histogram.
            return (nrnd0+0.5) * 0.5;
        }

        half4 LightingUnlit(SurfaceOutput s, half3 lightDir, half atten) {
            half4 c;
            c.rgb  = s.Albedo;
            c.a = s.Alpha;
            return c;
        }

        void vert(inout appdata_full v, out Input o) {
            //set custom value
            o.uv_MainTex = v.texcoord;
            o.texcoord = v.texcoord;
            #ifdef SOFTPARTICLES_ON
            float4 hpos = mul(UNITY_MATRIX_MVP, v.vertex);
            o.projPos = ComputeGrabScreenPos(hpos);
            #endif
        }
 
        void surf (Input IN, inout SurfaceOutput o) {
            half4 c = _Color;
            float2 delta = (IN.texcoord - 0.5 - (_Offset / 10));
            float distance = (delta.x * delta.x) + (delta.y * delta.y);
            c.a *= 1 - saturate(distance / _Radius);

            #ifdef SOFTPARTICLES_ON
            float sceneZ = LinearEyeDepth(SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(IN.projPos)));
            float partZ = IN.projPos.z;
            float fade = saturate(_InvFade * (sceneZ - partZ - _FadeCutoff))  / _FadeCutoff;
            c.a *= fade;
            #endif

            o.Albedo = c.rgb;
            o.Alpha = c.a + n2rand(IN.texcoord + float2(0.312, 0.212)) / 256;
            UNITY_APPLY_FOG(IN.fogCoord, c);
        }
        ENDCG
    }
}